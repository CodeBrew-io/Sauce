# Eval websocket
GET		/eval						controllers.Eval.eval

# Static assets for oauth
GET     /webjars/*file              controllers.WebJarAssets.at(file)
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Secure social
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout						securesocial.controllers.LoginPage.logout
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

GET		/user   					controllers.Users.info
GET		/user/exists/:userName		controllers.Users.exists(userName)
POST 	/user 						controllers.Users.add
GET		/user/login 				controllers.Assets.at(path="/public", file="login.html")

GET		/snippets/queryUser 		controllers.Snippets.queryUser
GET     /snippets					controllers.Snippets.queryDistinct(terms: Option[String], userName: Option[String], offset: Option[Int])
POST	/snippets 					controllers.Snippets.add
DELETE  /snippets					controllers.Snippets.delete(id: String)
GET     /snippets/u/:username/:id	controllers.Snippets.find(id: String, username: String)
